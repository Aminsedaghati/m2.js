// Selector functions: each returns a function that will be used to filter the output (re-use where possible and reasonable)
m.s = {
	'[': function (k, c, v, i) {
		v = c ? new RegExp((({ '^=': '^', '~=': '(^|\\s)', '=': '^', '!=': '^', '|=': '^' })[c] || '') +
			((v || '').replace(/[.+*()]/g, '\\\1') || '.+') +
			(({ '$=': '$', '=': '$', '!=': '$', '~=': '(\\s|$)', '|=': '(-|$)' })[c] || ''), i) : /.+/;
		return function(n){ return !!(v.test(n[k] || n.getAttribute(k)) ^ (c == '!=')) };
	},
	'nth-of-type': function (n, s, i, c, l) {
		c = c == 'odd' ? '2n+1' : c == 'even' ? '2n+0' : c;
		/(\d+)(n\+(\d*)|)/.test(c) && (i = RegExp.$1, s = RegExp.$3);
		return function (t, c) {
			for (t = this.parentNode[g](n || this.nodeName), c = l ? t.length - i + s : i - s; l ? (c -= s >= 0) : (c += s < t.length);) if (t[c] == this) return !0
		}
	},
	'nth-last-of-type': function (n, s, i, c) { return m.s['nth-of-type'](c, s, i, n, 1) },
	'nth-child': function (_, a, b, c) { return m.s['nth-of-type'](c,0,0,'*') },
	'nth-last-child': function (_, a, b, c) { return m.s['nth-last-of-type'](c,0,0,'*') },
	'first-child': function () { return function(){ return this.parentNode[g]('*')[0] == this } },
	'last-child': function () { return function(n){ return n=this.parentNode[g]('*'), n[n.length-1] == this } },
	'first-of-type': function () { return function(){ return this.parentNode[g](this.nodeName)[0] == this } },
	'last-of-type': function () { return function(n){ return n=this.parentNode[g](this.nodeName), n[n.length-1] == this } },
	'only-child': function () { return function(){ return this.parentNode[g]('*').length == 1 } },
	'only-of-type': function () { return function(){ return this.parentNode[g](this.nodeName).length == 1 } },
	empty: function () { return function () { return !this.childNodes.length } },
	target: function (t) { return m.s['[']('id', '=', /^#(.+)$/.test(location.search) ? RegExp.$1 : '#') },
	lang: function () { return m.s['[']('lang', '|=', l, 'i') },
	enabled: function () { return function () { return !this.disabled } },
	disabled: function () { return function () { return this.disabled } },
	checked: function () { return function () { return this.checked } },
	not: function (_, a, b, n) { return n = m(n), function (l) { for (l = 0; n[l];) if (n[l++] == this) return !1; return !0 } },
	root: function() { return function(n){ return n == d.documentElement } },
	has: function(_, a, b, q) { return function(n){ return m(n).find(q).length > 0 } },
	contains: function (a, t, r, c) {
		t = function(n, r){ return n ? (n.nodeType == 3 && r.push(n.data), t(n.firstChild, r), t(n.nextSibling, r)) : r }
		return function(n) { return !!~t(n, r = []).join('').indexOf(c) }
	},
	hidden: function () { return function (n) { return !n.offsetWidth*n.offsetHeight } },
	visible: function () { return function (n) { return !!n.offsetWidth*n.offsetHeight } },
	odd: function() { return m.s['nth-child']('odd') },
	even: function() { return m.s['nth-child']('even') },
	eq: function(_, a, b, i) { i|=0; return function(){ return !i-- } },
	first: function() { return m.s.eq(0) },
	last: function() { return m.s.eq(this.length-1) },
	seq: function(_, i, l, s) { return s = s.split(','), s[1] = s[1] || this.length, function(n, i){ return i >= s[0] && i <= s[1] } },
	gt: function(_, a, b, i) { return m.s.seq(''+i) },
	lt: function(_, a, b, i) { return m.s.seq('0,'+i) },
	'#': function (n) { return function (t){ return t.id === n } },
	'.': function (n) { return m.s['[']('className', '*=', n) },
	'': function (n) { return m.s['[']('nodeName', '=', n, 'i') },
	'*': function () { return function (n) { return n[g]('*') } },
	'>': function () { return function (n, r, c) {
		for (r = [], n = n.childNodes, c = 0; n[c]; c++) n[c].nodeType == 1 && r.push(n[c]);
		return r }
	},
	'+': function () { return function (n) { for (;n = n.nextSibling;) if (n[c].nodeType == 1) return n } },
	'~': function () { return function (n, r) {
		for (r = []; n = n.nextSibling; n[c].nodeType == 1 && r.push(n));
		return r }
	}
}
// extra selectors
m.s[' '] = m.s['*']
'checkbox file image password radio reset submit text'.replace(/\w+/g, function (x) {
	if (x) m.s[x] = function() { return m.s['[']('type', '=', x, 'i') }
});
