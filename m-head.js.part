) {
/*
	Initialisation:
	- instantiation with "new" if necessary
	- DOM queries vs. other functions (handled via "i"nit method)

	m([DOM query, Array, DOM node, onready callback function], [opt: DOM query base])
*/
m = function (q, b) { return this instanceof m ? q + '' === q ? m(b || d).find(q) : this.i(q) : new m(q, b) }
m[p] = {
	// basic length
	length: 0,
	// initialisation for everything but functions or DOM queries
	i: function (q) { q && a.push.apply(this, q.nodeType ? [q] : /^f/.test(typeof q) ? m(d).r(q) : q.length ? q : []) },
	// DOMready
	r: function (f) { (function t(){ /c/.test(d.readyState) ? f() : setTimeout(t, 99) })(); return this },
	// Iterator
	each: function (a) {
		return m.each(this, a)
	},
	// Filtering m(...).filter([function returning either true to keep the node or something like an Array to replace it])
	filter: function (f, r) {
		r = []
		this.each(function (n, i, c, o) {
			c = f ? f.call(n,n,i) : !0
			c = c === !0 ? [n] : c || []
			for (o = c.length; o--; i < 0 && r.push(n))
				for (n = c[o], i = r.length; i-- && n !== r[i];);
		})
		r.reverse()
		return a.push.apply(o = new m([]), r), o
	}
